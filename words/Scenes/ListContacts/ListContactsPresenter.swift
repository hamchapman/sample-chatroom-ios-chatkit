//
//  ListContactsPresenter.swift
//  words
//
//  Created by Neo Ighodaro on 09/12/2017.
//  Copyright (c) 2017 CreativityKills Co.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import PusherChatkit

protocol ListContactsPresentationLogic {
    func presentContacts(_ contacts: [Contact], for users: Set<PCUser>)
    func presentAddedContact(_ contact: Contact)
}

class ListContactsPresenter: ListContactsPresentationLogic {
    
    // MARK: Properties
    
    var displayedContacts: [ListContacts.Fetch.ViewModel.DisplayedContact] = []
    weak var viewController: ListContactsDisplayLogic?
    
    // MARK: Present Contacts

    func presentContacts(_ contacts: [Contact], for users: Set<PCUser>) {
        displayedContacts = []
        
        for contact in contacts {
//            guard let user = users.first(where: {$0.id == contact.user.chatkit_id}) else {
//                print("eya")
//                return
//            }
//            var isOnline: Bool
//
//            switch user.presenceState {
//            case .online: isOnline = true
//            case .offline, .unknown: isOnline = false
//            }
            
            displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(
                id: contact.user.chatkit_id,
                name: contact.user.name,
                isOnline: false// isOnline
            ))
        }
            
        displayContacts()
    }
    
    func presentAddedContact(_ contact: Contact) {
        displayedContacts.append(ListContacts.Fetch.ViewModel.DisplayedContact(
            id: contact.user.chatkit_id,
            name: contact.user.name,
            isOnline: false
        ))
        
        displayContacts()
    }
    
    private func displayContacts() {
        let viewModel = ListContacts.Fetch.ViewModel(displayedContacts: displayedContacts)
        viewController?.displayFetchedContacts(viewModel: viewModel)
    }
}
