//
//  ListContactsModels.swift
//  words
//
//  Created by Neo Ighodaro on 09/12/2017.
//  Copyright (c) 2017 CreativityKills Co.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum ListContacts
{
    enum AddContact
    {
        struct Request
        {
            var user_id: String
        }
        
        struct Response
        {
            var data: [String: Any?]
            var contact: Contact?
            
            init(data: [String: Any?]) {
                self.data = data
                
                let user = User(
                    id: data["id"] as! Int,
                    name: data["name"] as! String,
                    email: data["email"] as! String,
                    chatkit_id: data["chatkit_id"] as! String
                )
                
                let roomObject = data["room"] as! [String:Any]
                
                let room = Room(
                    id: roomObject["id"] as! Int,
                    name: roomObject["name"] as! String
                )
                    
                self.contact = Contact(user: user, room: room)
            }
        }
        
        struct ViewModel
        {
            var contact: FetchContacts.ViewModel.DisplayedContact
        }
    }
    
    enum FetchContacts
    {
        struct Request
        {
        }
    
        struct Response
        {
            var contacts: [Contact]? = []
            var data: [[String: Any]?]?
            
            init(data: [[String: Any]?]?) {
                self.data = data!
                
                for contact in data! {
                    let user = User(
                        id: contact!["id"] as! Int,
                        name: contact!["name"] as! String,
                        email: contact!["email"] as! String,
                        chatkit_id: contact!["chatkit_id"] as! String
                    )
                    
                    let roomObject = contact!["room"] as! [String:Any]
                    
                    let room = Room(
                        id: roomObject["id"] as! Int,
                        name: roomObject["name"] as! String
                    )
                    
                    self.contacts?.append(Contact(user: user, room: room))
                }
            }
        }
    
        struct ViewModel
        {
            struct DisplayedContact
            {
                var name: String
                var isOnline: Bool
            }
            
            var displayedContacts: [DisplayedContact]
        }
    }
}
